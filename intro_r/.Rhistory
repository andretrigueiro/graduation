a
# Podem receber argumentos
a<-rep("Aluno",times=3)
a
help(sum)         #acessa a documentacao do R
getwd()           #verifica o diretorio de trabalho
setwd()           #seta o dieorio de trabalho
list.files()      #lista os arquivos presentes no diretorio de trabalho
#funcao c() : concatenate
number<-c(1, 2, 3, 4, 5)
letter<-c("x", "y", "z", "w", "j")
logical<- c(TRUE, FALSE, FALSE, TRUE, FALSE)
seq<-1:10
complexo<-16i
help(c)
#funcao vector(): cria vetores
a<-vector(mode = "integer", length = 10)
b<-vector("logical", 10)
c<-numeric(10)
d<-character(10)              #os vetores sao criados com valores padrao de cada classe
#hierarquia de classes
x<-c(1, 2, 3)                 #numeric
y<-c("1", "2", "3")           #character
x<-c(TRUE, FALSE, FALSE)      #logical
y<-c("TRUE", "FALSE", "FALSE")#character
#Ex.4: verifique a classe de cada ojeto
a<-c(1, "a", TRUE)
b<-c(1, "a")
c<-c(1, T)
d<-c("a", T)
class(a)
class(b)
class(c)
class(d)
#coercao de objetos usando funcoes do tipo as.algumacoisa()
x<-0:10
x
class(x)
a<-as.numeric(x)
a
class(a)
b<-as.character(x)
b
class(b)
c<-as.logical(x)
c
class(c)
x == a
#vetores de NA
x<-c(1, 2, 3, NA)
y<-c("a", "b", "c", NA)
is.na(x)
w<-rep(NA, 10)
w
class(w)
z<-rep(NA_integer_, 10)
z
class(z)
a <- c(1, 3, NA, 7, 9)
sum(a)
sum(a, na.rm=TRUE)
is.na(a)
#objetos possuem atributos: classe, tamanho, dimensoes, nemes, etc
x<-1:5
x
length(x)
dim(x)
attributes(x)
names(x)<-c("a", "b", "c", "d", "e")
x
attributes(x)
x<-factor(c("s", "n", "n", "s", "s"))
z<-factor(c("alto", "baixo", "medio"))
######################################
##    Trabalhando com vetores       ##
######################################
##  Operacoes vetorizadas
x<-1:5
y<-6:10
x+y               #ocorre a soma dos valores de ambos os vetores
x*2               #podemos multiplicar um vetor por um numero
x^2
z<-c(x,y)
z+x
w<-1:3
w+x
l<-c(T, T, F, T, F, F)
l/2
## para acessar vetores, usamos [ ]
letter<-c("x", "y", "z", "w", "j")
letter[2]               #acessa o segundo elemento do vetor
## para acessar vetores, usamos [ ]
letter<-c("x", "y", "z", "w", "j")
letter[2]               #acessa o segundo elemento do vetor
letter[2]               #acessa o segundo elemento do vetor
letter[2:4]             #podemos usar sequencia de valores
letter[c(1, 4)]         #usamos a funcao c() para valores nao contiguos
letter[-2]              #usamos numeros negativos para excluir um ou mais valores
letter
letter[c(-2, -5)]
idx<-c(1, 4)            #podemos criar indices numericos
letter[idx]
x<-1:10
x[x>7]                  #podemos usar "<", "==", ">=", etc.
letter[letter>"k"]      #tambem eh possivel para caracteres
letter[letter<"k"]
letter=="z"
#funcoes para identificar valores extremos
set.seed(1)
s<-sample(-1000:1000, 200)
which.max(s)            #procura a posicao do maior valor
max(s)                  #imprime o maior valor
range(s)
s>0                     #cria um vetor logico
which(s>0)              #cria um vetor com as posicoes que satisfazem o comando
#funcoes de ordenamento
x<-c(3, 8, 2, 1, 5, 9, 7, 7, 3)
x
sort(x)                 #ordena um vetor
sort(x, decreasing = T)
order(x)                #pega a ordem de cada elemento para torna-lo crescente
sample(x)               #randomiza
unique(x)               #elimina as replicatas
duplicated(x)           #logico
#Ex.11: quantos duplicados existem em x?
t<-duplicated(x)
s>0                     #cria um vetor logico
#funcoes para identificar valores extremos
set.seed(1)
s<-sample(-1000:1000, 200)
s>0                     #cria um vetor logico
which(s>0)              #cria um vetor com as posicoes que satisfazem o comando
t>0
which(t>0)
r<-which(t>0)
length(r)
logical<- c(TRUE, FALSE, FALSE, TRUE, FALSE)
readLines("Data/happiness_2015.csv", 10)
setwd(D::/TI/IntroR)           #seta o dieorio de trabalho
setwd(D:/TI/IntroR)
setwd("~/R/win-library")
setwd("~/")
setwd("~/D/TI/")
setwd("~/D:/TI/")
setwd("D:/TI/Intro R")
readLines("Data/happiness_2015.csv", 10)
# use readLines to get the data
dat <- readLines(Data/happiness_2015.csv")
# i had to do this to fix grep errors
Sys.setlocale('LC_ALL','C')
# filter out the repeating, and wonky headers
dat_2 <- grep("Node Name,RTC_date", dat, invert=TRUE, value=TRUE)
# i had to do this to fix grep errors
Sys.setlocale('LC_ALL','C')
# filter out the repeating, and wonky headers
dat_2 <- grep("Node Name,RTC_date", dat, invert=TRUE, value=TRUE)
# use readLines to get the data
dat <- readLines("Data/happiness_2015.csv")
# i had to do this to fix grep errors
Sys.setlocale('LC_ALL','C')
# filter out the repeating, and wonky headers
dat_2 <- grep("Node Name,RTC_date", dat, invert=TRUE, value=TRUE)
# turn that vector into a text connection for read.csv
dat_3 <- read.csv(textConnection(paste0(dat_2, collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
str(dat_3)
# grab the headers
headers <- strsplit(dat[1], ",")[[1]]
readLines("Data/happiness_2015.csv", 10)
# use readLines to get the data
dat <- readLines("Data/happiness_2015.csv"[-c(0),])
#removendo as 3 primeiras linhas, pois não há necessidade de utiliza-las
dat[-c(1, 2, 3), ]
#removendo as 3 primeiras linhas, pois não há necessidade de utiliza-las
dat <- dat[-c(1, 2, 3), ]
dat_3<- dat_3[-c(1, 2, 3), ]
str(dat_3)
# grab the headers
headers <- strsplit(dat[1], ",")[[1]]
# grab the headers
headers <- strsplit(dat[1], ",")[[1]]
# grab the headers
headers <- strsplit(dat[1], "\t")[[1]]
length(headers)
View(dat_3)
#Lendo as 10 primeiras linhas para verificar o arquivo
readLines("Data/happiness_2015.csv", 10)
#Importanto os dados para um vetor "dat"
dat <- readLines("Data/happiness_2015.csv")
setwd("~/D:/TI/")head(dat)
read(dat)
head(dat)
dat <- dat[-c(1, 2, 3), ]
dat <- dat[-c(1, 2, 3), ]
dat <- dat[-c(1, 2, 3)]
head(dat)
#Conferindo os dados do vetor
head(dat)
#Fix grep errors
Sys.setlocale('LC_ALL','C')
#Filtrando repetições
dat_2 <- grep("Node Name,RTC_date", dat, invert=TRUE, value=TRUE)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv
dat_3 <- read.csv(textConnection(paste0(dat_2, collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
str(dat_3)
tail(dat)
View(dat_3)
#Separando os headers
headers <- strsplit(dat[1], "\t")[[1]]
#Verificando a quantidade de headers
length(headers)
#Verificando a quantidade de headers
length(headers)
colnames(dat_3) <- headers
colnames(dat_3) <- headers
headers
View(dat_3)
#Lendo as 10 primeiras linhas para verificar o arquivo
readLines("Data/happiness_2015.csv")
#Importanto os dados para um vetor "dat"
dat <- readLines("Data/happiness_2015.csv")
#Removendo as 3 primeiras linhas de comentários para facilitar a manipulação do arquivo
dat <- dat[-c(1, 2, 3)]
#Lendo as 10 primeiras linhas para verificar o arquivo
readLines("Data/happiness_2015.csv")
#Importanto os dados para um vetor "dat"
dat <- readLines("Data/happiness_2015.csv")
dat
#Removendo as 3 primeiras linhas de comentários para facilitar a manipulação do arquivo
dat <- dat[-c(1, 2, 3)]
#Conferindo os dados do vetor
head(dat)
tail(dat)
#Fix grep errors
Sys.setlocale('LC_ALL','C')
#Filtrando repetições
dat_2 <- grep("Node Name,RTC_date", dat, invert=TRUE, value=TRUE)
#Filtrando repetições
dat_2 <- grep("Node Name,RTC_date", dat, invert=TRUE, value=TRUE)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat_2, sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
View(dat_3)
dat
dat_2
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat_2, sep="\t", collapse="\n")),
header=TRUE, stringsAsFactors=FALSE)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat_2, sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
View(dat_3)
as.numeric(gsub(",", ".", gsub("\\.", "", dat_2)))
dat_2
scan(text=dat_2, dec=",", sep=".")
help(readLines)
help(dec)
??dec
#Importanto os dados para um vetor "dat"
dat <- readLines("Data/happiness_2015.csv", dec=",", header=F)
#Importanto os dados para um vetor "dat"
dat <- readLines("Data/happiness_2015.csv", dec=",")
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat_2, dec=",", sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
str(dat_3)
View(dat_3)
#Lendo as 10 primeiras linhas para verificar o arquivo
readLines("Data/happiness_2015.csv")
#Importanto os dados para um vetor "dat"
dat <- readLines("Data/happiness_2015.csv")
#Removendo as 3 primeiras linhas de comentários para facilitar a manipulação do arquivo
dat <- dat[-c(1, 2, 3)]
#Conferindo os dados do vetor
head(dat)
#Separando os headers
headers <- strsplit(dat[1], "\t")[[1]]
#Verificando a quantidade de headers
length(headers)
dat <- dat[-c(1)]
#Fix grep errors
Sys.setlocale('LC_ALL','C')
#Filtrando repetições
dat_2 <- grep("Node Name,RTC_date", dat, invert=TRUE, value=TRUE)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat_2, dec=",", sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
View(dat_3)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat_2, sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
View(dat_3)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat, sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
View(dat_3)
#Importanto os dados para um vetor "dat"
dat <- readLines("Data/happiness_2015.csv")
#Removendo as 3 primeiras linhas de comentários para facilitar a manipulação do arquivo
dat <- dat[-c(1, 2, 3)]
#Separando os headers
headers <- strsplit(dat[1], "\t")[[1]]
#Verificando a quantidade de headers
length(headers)
#Removendo a linha de headers para facilitar a manipulação do arquivo
dat <- dat[-c(1)]
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_3 <- read.csv(textConnection(paste0(dat_2, sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=FALSE)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_2 <- read.csv(textConnection(paste0(dat, sep="\t", collapse="\n")),
header=FALSE, stringsAsFactors=TRUE)
#Transformando o vetor em uma textConnection para poder ser lido pelo read.csv e criar um data.frame
dat_2 <- read.csv(textConnection(paste0(dat, sep="\t")),
header=FALSE, stringsAsFactors=TRUE)
View(dat_2)
head(dat)
help(readLines)
help("read.csv")
dat <- read.csv("Data/happiness_2015.csv", skip = 3, header = TRUE, sep = "\t", dec = "," )
View(dat)
