# Testanto os dados
if(estado %in% dataset$State == FALSE){
print("estado invalido")
stop()
}
# Caso 1 : Heart Attack
# Caso 2 : Heart Failure
# Caso 3 : Pneumonia
if(resultado == "heart attack"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "heart failure"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "pneumonia"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else {
print("resultado invalido")
stop()
}
} #end function
best("TX", "heart attack")
best <- function(estado, resultado) {
# Escreva as operações da função aqui
# Leitura dos dados
dataset<-read.csv("outcome-of-care-measures.csv")
# Testanto os dados
if(estado %in% dataset$State == FALSE){
print("estado invalido")
stop()
}
# Caso 1 : Heart Attack
# Caso 2 : Heart Failure
# Caso 3 : Pneumonia
if(resultado == "heart attack"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "heart failure"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "pneumonia"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else {
print("resultado invalido")
stop()
}
} #end function
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best <- function(estado, resultado) {
# Escreva as operações da função aqui
# Leitura dos dados
dataset <- read.csv("outcome-of-care-measures.csv")
# Testanto os dados
if(estado %in% dataset$State == FALSE){
print("estado invalido")
stop()
}
# Caso 1 : Heart Attack
# Caso 2 : Heart Failure
# Caso 3 : Pneumonia
if(resultado == "heart attack"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "heart failure"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "pneumonia"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else {
print("resultado invalido")
stop()
}
} #end function
best("TX", "heart attack")
b
best <- function(estado, resultado) {
# Escreva as operações da função aqui
# Leitura dos dados
dataset <- read.csv("outcome-of-care-measures.csv")
# Testanto os dados
if(estado %in% dataset$State == FALSE){
print("estado invalido")
stop()
}
# Caso 1 : Heart Attack
# Caso 2 : Heart Failure
# Caso 3 : Pneumonia
if(resultado == "heart attack"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "heart failure"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "pneumonia"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else {
print("resultado invalido")
stop()
}
} #end function
best("TX", "heart attack")
best <- function(estado, resultado) {
# Escreva as operações da função aqui
# Leitura dos dados
dataset <- read.csv("outcome-of-care-measures.csv")
# Testanto os dados
if(estado %in% dataset$State == FALSE){
print("estado invalido")
stop()
}
# Caso 1 : Heart Attack
# Caso 2 : Heart Failure
# Caso 3 : Pneumonia
if(resultado == "heart attack"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "heart failure"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "pneumonia"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else {
print("resultado invalido")
stop()
}
} #end function
best("TX", "heart attack")
setwd(intro_r)
setwd("D:/TI/IMD/intro_r")
best <- function(estado, resultado) {
# Escreva as operações da função aqui
# Leitura dos dados
dataset <- read.csv("outcome-of-care-measures.csv")
# Testanto os dados
if(estado %in% dataset$State == FALSE){
print("estado invalido")
stop()
}
# Caso 1 : Heart Attack
# Caso 2 : Heart Failure
# Caso 3 : Pneumonia
if(resultado == "heart attack"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "heart failure"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else if (resultado == "pneumonia"){
dataset <- subset(dataset, State == estado & Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia != "Not Available")
dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(as.character(dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
dataset <- data.frame(dataset$Hospital.Name, dataset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- which.min(dataset$dataset.Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
idx <- as.numeric(idx)
print(as.character(dataset$dataset.Hospital.Name[idx]))
}else {
print("resultado invalido")
stop()
}
} #end function
best("TX", "heart attack")
datasets::airquality
str(mapply)
#os argumentos "x" e "y" variam
mapply(function(x,y){x^y},x=c(2,3),y=c(3,4))
#aqui somente o argumento "x" varia
mapply(function(x,y){x^y},x=c(2,3),y=c(4))
sapply(airquality, colMeans)
lapply(airquality, colMeans)
mapply(airquality, colMeans)
help(mapply)
mapply(airquality, mean )
sapply(airquality, mean )
sapply(airquality(,5), mean)
sapply(airquality(,5), mean)
sapply(airquality, mean)
sapply(airquality[,5], mean)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
sapply(airquality[,4], mean)
sapply(airquality[4,], mean)
sapply(airquality[5,], mean)
sapply(airquality, mean)
# Fazendo o subset do dataset para as duas corridas
run1 <- DNase[DNase$Run == 1,]
run2 <- DNase[DNase$Run == 2,]
# Plotar primeiro a corrida 1 (run1)
plot(run1$conc, run1$density, col = "red",
pch = 16, xlab = "Concentração", ylab = "Densidade")
# Adicionar título ao gráfico
title("Concentração x Densidade")
# Com a função points(), adicionar ao gráfico os pontos da corrida 2 (run2)
points(run2$conc, run2$density, col = "blue",
pch = 17, xlab = "Concentração", ylab = "Densidade")
# Adicionar a legenda
legend(x = "topleft", col = c("red", "blue"), pch = c(16, 17),
legend = c("Run 1", "Run 2"))
run3 <- DNase[DNase$Run == 3,]
points(run3$conc, run3$density, col = "green",
pch = 15, xlab = "Concentração", ylab = "Densidade")
legend(x = "topleft", col = c("red", "blue", "green"), pch = c(16, 17, 15),
legend = c("Run 1", "Run 2", "Run 3"))
cars_peso <- mtcars$wt
barplot(cars_peso)
help(par)
cars_peso <- mtcars$wt
barplot(cars_peso)
par(lty = 3, lwd = 4, col = "red")
linha <- median(cars_peso)
par(linha, lty = 3, lwd = 4, col = "red")
par(linha, lty = 3, lwd = 4, col = "red")
par(linha)
par(linha)
abline(linha)
abline(linha, lty = 3, lwd = 4, col = "red")
help(abline)
abline(h = linha, lty = 3, lwd = 4, col = "red")
#Titulo do grafico
title("Peso dos carros")
cars_cilindradas <- mtcars$cyl
boxplot(cars_peso ~ cars_cilindradas, col = "blue", xlab = "Peso", ylab = "Cilindradas")
boxplot(cars_peso ~ cars_cilindradas, col = "yellow", xlab = "Peso", ylab = "Cilindradas")
boxplot(cars_peso ~ cars_cilindradas, col = "yellow", xlab = "Cilindradas", ylab = "Peso")
title("Peso x Cilindradas")
airquality$Solar.R
Nor<-rnorm(10000, mean=0, sd=1)      #distribuicao normal
plot(Nor)
hist(Nor, 100)                       #histograma
unif<-runif(10000)                   #distribuicao uniforme
hist(unif, 100)
hist(Nor, 100)                       #histograma
distribuicao<-rnorm(airquality$Solar.R)      #distribuicao normal
hist(airquality$Solar.R)                       #histograma
hist(distribuicao)                       #histograma
hist(airquality$Solar.R)                       #histograma
hist(distribuicao)                       #histograma
hist(distribuicao)                       #histograma
hist(distribuicao)                       #histograma
hist(airquality$Solar.R)                       #histograma
help(hist)
#Titulo
title("Distribuição da Incidencia Solar")
#Titulo
title("Incidencia Solar")
#Plot do histograma
hist(airquality$Solar.R)
#Titulo
title("Incidencia Solar")
linha2 <- mean(airquality$Solar.R)
abline(h = linha2, lty = 3, lwd = 4, col = "red")
linha2 <- mean(airquality$Solar.R)
abline(h = linha2, lty = 3, lwd = 4, col = "red")
help(mean)
linha2 <- mean(airquality$Solar.R, na.rm = TRUE)
abline(h = linha2, lty = 3, lwd = 4, col = "red")
abline(v = linha2, lty = 3, lwd = 4, col = "red")
#Plot do histograma
hist(airquality$Solar.R)
linha2 <- mean(airquality$Solar.R, na.rm = TRUE)
abline(v = linha2, lty = 3, lwd = 4, col = "red")
help(hist)
#Plot do histograma
hist(airquality$Solar.R, xlab = "incidencia solar")
#Plot do histograma
hist(airquality$Solar.R, xlab = "incidencia solar", ylab = "frequencia")
help(hist)
install.packages(c("dplyr", "ggplot2", "tidyr"))
# Este exercício será feito com os pacotes vistos na última aula. Para instalá-los, use:
install.packages(c("dplyr", "tidyr", "ggplot2"))
view(DNase)
DNase
media <- DNase %>% select(conc)
media <- DNase %>%
select(conc)
DNase <- DNase
media <- DNase %>%
select(conc)
# E carregue-os:
library(dplyr)
library(tidyr)
library(ggplot2)
media <- DNase %>%
select(conc)
media_conc <- DNase %>%
select(conc)
media_conc <- DNase %>% select(conc)
media_densi <- DNase %>% select(density)
mean(media_conc)
viem(mean)
view(man)
view(mean)
help(mean)
mean(media_conc, na.rm = TRUE)
View(media_conc)
m_conco <- mean(media_conc)
View(media_conc)
View(media_conc)
class(media_conc)
DNase %>%
select(conc, density) >%>
summarise(mean = mean(conc, na.rm = T))
# Exercício 1
# Usando o dataset 'starwars', calcule:
data("starwars")
force(starwars)
DNase %>%
select(conc) >%>
summarise(mean = mean(conc, na.rm = T))
?diamonds
diamonds %>%
select(cut, price) %>%
group_by(cut) %>%
summarise(mean = mean(price, na.rm = T))
diamonds %>%
select(cut) %>%
group_by(cut) %>%
summarise(n = length(cut))
diamonds
iris
iris %>%
select(Sepal.Length, Sepal.Width) %>%
mutate(razao = Sepal.Length / Sepal.Width)
iris %>%
mutate(razao = Sepal.Length / Sepal.Width)
airquality %>%
unite(col = Day, Month, sep = "/")
# Carregar pacotes --------------------------------------------------------
library(dplyr)
library(tidyr)
library(ggplot2)
# Funções tidyr -----------------------------------------------------------
# separate() - Separar uma coluna em duas ou mais colunas diferentes
presidential2 <- presidential %>%
separate(col = start, into = c("start_year", "start_month", "start_day"), sep = "-")
airquality2 <- airquality %>%
unite(col = Day, Month, sep = "/")
View(airquality2)
presidential
help(unite)
airquality2 <- airquality %>%
unite(col = Data, Day, Month, sep = "/")
View(airquality2)
# Questão 5 ---------------------------------------------------------------
# Considere o seguinte data frame contendo as atuações de alguns jogadores do campeonato brasileiro 2019.
brasileirao <- data.frame(
jogador = c("Gabigol", "Cebolinha", "Dudu", "D.Alves", "Arrascaeta", "Fábio"),
time = c("FLARJ", "GRERS", "PALSP", "SAOSP", "FLARJ", "CRUMG"),
scoreRodada1 = c("17.5","15.8","5.6","4.2","26.4","9.7"),
scoreRodada2 = c("10.9","18.2","16.3","4.5","26.5","2.5")
)
brasileirao <- brasileirao %>%
gather(key = rodada, value = c(scoreRodada1, scoreRodada2))
brasileirao <- brasileirao %>%
gather(key = rodada, value = c(scoreRodada1, scoreRodada2))
help("gather")
brasileirao <- brasileirao %>%
gather(key = rodada, value = scoreRodada1)
brasileirao <- brasileirao %>%
gather(key = rodada, value = score, scoreRodada1, scoreRodada2)
brasileirao <- brasileirao %>%
gather(key = rodada, value = score, scoreRodada1)
View(brasileirao)
# Questão 5 ---------------------------------------------------------------
# Considere o seguinte data frame contendo as atuações de alguns jogadores do campeonato brasileiro 2019.
brasileirao <- data.frame(
jogador = c("Gabigol", "Cebolinha", "Dudu", "D.Alves", "Arrascaeta", "Fábio"),
time = c("FLARJ", "GRERS", "PALSP", "SAOSP", "FLARJ", "CRUMG"),
scoreRodada1 = c("17.5","15.8","5.6","4.2","26.4","9.7"),
scoreRodada2 = c("10.9","18.2","16.3","4.5","26.5","2.5")
)
# spread() - Separar os valores de uma coluna baseando-se em outra coluna de keys
# Antes, é preciso criar uma coluna de identificação para que cada linha seja única.
iris2 <- iris
iris2$id <- 1:nrow(iris2)
iris_3 <- iris2 %>%
spread(Species, Sepal.Length)
View(iris_3)
iris_3 <- iris2 %>%
spread(Species, Sepal.Length)
View(iris_3)
iris_4 <- iris2 %>%
spread(Species, Sepal.Width)
View(iris_4)
# gather () - Reune as observações de um grupo de colunas em uma estrutura key - value
iris_4 <- iris %>%
gather(key = feature, value = value, Sepal.Length:Petal.Width)
View(iris_4)
brasileirao2 <- brasileirao %>%
gather(key = rodada, value = score, scoreRodada1:scoreRodada2)
brasileirao2 <- brasileirao %>%
gather(key = rodada, value = value, scoreRodada1:scoreRodada2)
brasileirao2 <- brasileirao %>%
gather(key = rodada, value = score, scoreRodada1:scoreRodada2)
View(brasileirao2)
help(spread)
DNase %>%
select(conc) %>%
summarise(mean = mean(conc, na.rm = T))
DNase %>%
select(conc, density) %>%
summarise(media_conc = mean(conc),
sd_conc = sd(conc),
media_dens = mean(density),
sd_conc = sd(density))
DNase %>%
select(conc, density) %>%
summarise(media_conc = mean(conc),
sd_conc = sd(conc),
media_dens = mean(density),
sd_dens = sd(density))
DNase
DNase %>%
select(Run, conc, density) %>%
group_by(Run) %>%
summarise(media_conc = mean(conc),
sd_conc = sd(conc),
media_dens = mean(density),
sd_dens = sd(density))
help(ifelse)
DNase %>%
select(Run, density) %>%
group_by(Run) %>%
summarise(n = ifelse(density >= 1, n++,))
DNase %>%
select(Run, density) %>%
group_by(Run) %>%
summarise(n = ifelse(density >= 1, n++))
DNase %>%
select(Run, density) %>%
group_by(Run) %>%
summarise(n = ifelse(density >= 1, TRUE, FALSE))
DNase %>%
select(Run, density) %>%
group_by(Run) %>%
summarise(n = n())
